<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-04-02T21:25:13+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jaewook Log 🧑🏻‍💻</title><subtitle>Hi my name is jaewook lee.
</subtitle><author><name>Jaewook Lee</name></author><entry><title type="html">Utterances로 깃허브 페이지(Github Page) 댓글 기능 추가하는 법</title><link href="http://localhost:4000/2022/03/14/add_comment_func.html" rel="alternate" type="text/html" title="Utterances로 깃허브 페이지(Github Page) 댓글 기능 추가하는 법" /><published>2022-03-14T00:00:00+09:00</published><updated>2022-03-14T00:00:00+09:00</updated><id>http://localhost:4000/2022/03/14/add_comment_func</id><content type="html" xml:base="http://localhost:4000/2022/03/14/add_comment_func.html"><![CDATA[<h1 id="서론">서론</h1>
<p><img src="/assets/../../assets/images/posts/blog/03_14/1.png" alt="" class="align-center" /></p>

<p>깃허브 페이지에 댓글 기능을 추가하는 방법 중에 가장 대중화된(?) 방법은 <a href="https://disqus.com/">Disqus</a>를 사용하는 것 입니다. Disqus도 무료로 사용할 수 있지만… 광고가 붙게되고 <del>못생겨서</del>
대안을 찾게 됐습니다. 대안을 찾을 때 고려했던 사항은</p>

<ol>
  <li>광고가 없어야 한다. 🚫</li>
  <li>가볍고 예뻐야 한다. 💅</li>
</ol>

<p>입니다. 그 결과 발견💡한 것이 <a href="https://utteranc.es/">Utterances</a> 입니다.<br />
<!--more--></p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/2.png" alt="" class="align-center" /></p>

<p><code class="language-plaintext highlighter-rouge">Utterances</code>를 사용하게 되면 위의 사진처럼 댓글을 Github의 issue로 관리할 수 있습니다. 댓글을 달기 위해서는 Github의 계정이 필요한 것이 단점이지만, 제 블로그에 들어오셔서 댓글을 남기실 분들은 Github 계정이
있을테니 괜찮을 것 같습니다. 지금부터는 차례차례 <code class="language-plaintext highlighter-rouge">Utterances</code>를 제 블로그에 적용해보겠습니다.</p>

<h1 id="1-레파지토리-생성">1. 레파지토리 생성</h1>
<p><img src="/assets/../../assets/images/posts/blog/03_14/4.png" alt="" class="align-center" /></p>

<p>Utterance를 적용하기에 앞서 댓글(깃허브 이슈)를 관리할 public repository가 필요합니다. 이름은 정해져있는게 아니고 임의로 지정하셔도 무관합니다. 다만, 꼭 <code class="language-plaintext highlighter-rouge">public</code>으로 생성하셔야 합니다.</p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/5.png" alt="" class="align-center" /></p>

<p>그 다음 생성한 레파지토리 안에 <code class="language-plaintext highlighter-rouge">utterances.json</code> 파일을 생성하셔서 아래의 코드를 작성하시면 사전 작업 완료입니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"origins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"https://lee-jaewook.github.io"</span><span class="p">]</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="p">[</span><span class="err">*</span><span class="p">]</span><span class="w"> </span><span class="err">안에는</span><span class="w"> </span><span class="err">댓글</span><span class="w"> </span><span class="err">기능을</span><span class="w"> </span><span class="err">추가할</span><span class="w"> </span><span class="err">사이트를</span><span class="w"> </span><span class="err">입력</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="2-설치">2. 설치</h1>
<p><img src="/assets/../../assets/images/posts/blog/03_14/3.png" alt="" class="align-center" /></p>

<p>먼저 깃허브 앱의 <a href="https://github.com/apps/utterances">Utterances 설치 페이지</a>에서 <code class="language-plaintext highlighter-rouge">install</code> 버튼을 눌러줍니다.</p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/6.png" alt="" class="align-center" /></p>

<p>그 다음 <code class="language-plaintext highlighter-rouge">Only select repositories</code>를 선택, <code class="language-plaintext highlighter-rouge">select repositoris</code>를 클릭하셔서 <a href="#1-댓글을-관리할-레파지토리-생성">챕터 1</a>에서 만들었던 repository를 선택하시면 됩니다.</p>

<h1 id="3-설정">3. 설정</h1>
<p><img src="/assets/../../assets/images/posts/blog/03_14/7.png" alt="" class="align-center" /></p>

<p>설치를 완료하시면 위에 보이시는 설정 페이지로 자동으로 이동됩니다. 이 페이지에서 <code class="language-plaintext highlighter-rouge">rpositroy 설정</code>, <code class="language-plaintext highlighter-rouge">포스트와 이슈 맵핑</code>, <code class="language-plaintext highlighter-rouge">이슈 라벨</code>, <code class="language-plaintext highlighter-rouge">테마 설정</code>을 하실 수 있습니다.</p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/8.png" alt="" class="align-center" /></p>

<p><code class="language-plaintext highlighter-rouge">rpositroy 설정</code>은 <code class="language-plaintext highlighter-rouge">username/repository_name</code>을 기입하시고 <code class="language-plaintext highlighter-rouge">포스트와 이슈 맵핑</code>은 pathname으로 이슈를 매핑하는게 나중에 블로그 내용이 바뀌어도 이슈가 맵핑될 수 있을 것 같아 선택하였습니다.</p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/9.png" alt="" class="align-center" /></p>

<p>설정을 완료하신 다음 <code class="language-plaintext highlighter-rouge">Enable Utterances</code> 스크립트를 복사합니다.</p>

<h1 id="4-코드-추가">4. 코드 추가</h1>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">Enable Utterances</code> 스크립트를 넣을 파일을 찾아야 합니다. 보통 <code class="language-plaintext highlighter-rouge">_layouts/article.html</code>에 넣으시면 되는데, 제가 사용하고 있는 <a href="https://github.com/kitian616/jekyll-TeXt-theme">TeXt 테마</a>에서는</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## =&gt; Comments</span>
<span class="c1">##############################</span>
<span class="na">comments</span><span class="pi">:</span>
  <span class="na">provider</span><span class="pi">:</span> <span class="s2">"</span><span class="s">custom"</span> <span class="c1"># false (default), "disqus", "gitalk", "valine", "custom"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_config.yml</code>의 commets provider를 <code class="language-plaintext highlighter-rouge">custom</code>으로 수정한 뒤 <code class="language-plaintext highlighter-rouge">_inclue/comments-providers/cumtom.html</code>에 아래와 같이 코드를 추가하면 됩니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- start custom comments snippet --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://utteranc.es/client.js"</span>
        <span class="na">repo=</span><span class="s">"lee-jaewook/blog-comments"</span>
        <span class="na">issue-term=</span><span class="s">"pathname"</span>
        <span class="na">theme=</span><span class="s">"github-light"</span>
        <span class="na">crossorigin=</span><span class="s">"anonymous"</span>
        <span class="na">async</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
<span class="c">&lt;!-- end custom comments snippet --&gt;</span>
</code></pre></div></div>

<p>수정된 파일을 모두 깃허브에 push하시면 아래와 같이 댓글 기능이 추가된 것을 확인할 수 있습니다.(로컬로는 안보입니다!)</p>

<p><img src="/assets/../../assets/images/posts/blog/03_14/10.png" alt="" class="align-center" /></p>]]></content><author><name>Jaewook Lee</name></author><category term="Blog" /><summary type="html"><![CDATA[서론 깃허브 페이지에 댓글 기능을 추가하는 방법 중에 가장 대중화된(?) 방법은 Disqus를 사용하는 것 입니다. Disqus도 무료로 사용할 수 있지만… 광고가 붙게되고 못생겨서 대안을 찾게 됐습니다. 대안을 찾을 때 고려했던 사항은 광고가 없어야 한다. 🚫 가볍고 예뻐야 한다. 💅 입니다. 그 결과 발견💡한 것이 Utterances 입니다.]]></summary></entry><entry><title type="html">Oracle DB &amp;amp; SQL 4(DML)</title><link href="http://localhost:4000/2021/11/28/oracle4.html" rel="alternate" type="text/html" title="Oracle DB &amp;amp; SQL 4(DML)" /><published>2021-11-28T00:00:00+09:00</published><updated>2021-11-28T00:00:00+09:00</updated><id>http://localhost:4000/2021/11/28/oracle4</id><content type="html" xml:base="http://localhost:4000/2021/11/28/oracle4.html"><![CDATA[<h1 id="들어가기-전에">들어가기 전에</h1>
<p>SQL(Structured Query Language) 언어의 종류는 크게 DML, DDL, DCL, TCL이 있습니다. 이번 포스팅에서는 DML에 대해 알아보도록 하겠습니다.
<img src="/assets/images/posts/oracle/4/1.jpeg" alt="" /></p>

<h1 id="핵심-개념">핵심 개념</h1>
<ul>
  <li>DML (Data Manipulation Language)</li>
  <li>INSERT</li>
  <li></li>
  <li>Date Data Type</li>
  <li>LOB Data Type</li>
</ul>

<!--more-->

<h1 id="insert">INSERT</h1>
<ul>
  <li></li>
</ul>

<h1 id="numeric-data-type">Numeric Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>NUMBER(P,S)</td>
      <td>가변길이 숫자 / P : 소숫점 포함 전체 자릿수(범위 : 1 ~ 38, default : 38) / S : 소수점 자릿수(범위 : -84 ~ 127, default : 0) /  max : 22byte</td>
    </tr>
    <tr>
      <td>FLOAT(P)</td>
      <td>NUMBER의 하위타입 / P : (범위 : 1~128, default : 128) / max : 22byte</td>
    </tr>
    <tr>
      <td>BINARY_FLOAT</td>
      <td>32bit 부동소수점 수 / max : 4byte</td>
    </tr>
    <tr>
      <td>BINARY_DOUBLE</td>
      <td>64bit 부동소수점 수 / max : 8byte</td>
    </tr>
  </tbody>
</table>

<h1 id="date-data-type">Date Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DATE</td>
      <td>BC 4712년 1월 1일 ~ 9999년 12월 31일, 연, 월, 일, 시, 분, 초 까지 입력 가능</td>
    </tr>
    <tr>
      <td>TIMESTAMP</td>
      <td>DATE에 더해 밀리초 이하까지 입력 가능</td>
    </tr>
  </tbody>
</table>

<h1 id="lob-data-type">LOB Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CLOB</td>
      <td>가변길이 대용량 문자 / 크기: 4GB</td>
    </tr>
    <tr>
      <td>NCLOB</td>
      <td>가변길이 대용량 유니코드 문자(다국어 입력가능) / 크기: 4GB</td>
    </tr>
    <tr>
      <td>BLOB</td>
      <td>이진형 대용량 객체 (주로 그래픽, 이미지, 동영상 등의 데이터에서 사용)</td>
    </tr>
    <tr>
      <td>BFILE</td>
      <td>대용량 이진 파일에 대한 위치, 이름을 저장</td>
    </tr>
  </tbody>
</table>

<p>여기서 LOB란 Large Object의 약자입니다. 이름에서 알 수 있듯 대용량 데이터를 저장할 수 있는 데이터타입인데, 일반적으로 그래픽, 이미지, 사운드등 비정형 데이터를 저장할때 LOB타입을 사용합니다.</p>

<h1 id="reference">Reference</h1>
<ul>
  <li><a href="https://docs.oracle.com/cd/A87860_01/doc/server.817/a76965/c10datyp.htm">oracle docs</a></li>
</ul>]]></content><author><name>Jaewook Lee</name></author><category term="SQL" /><summary type="html"><![CDATA[들어가기 전에 SQL(Structured Query Language) 언어의 종류는 크게 DML, DDL, DCL, TCL이 있습니다. 이번 포스팅에서는 DML에 대해 알아보도록 하겠습니다. 핵심 개념 DML (Data Manipulation Language) INSERT Date Data Type LOB Data Type]]></summary></entry><entry><title type="html">Oracle DB &amp;amp; SQL 3(오라클 데이터타입 정리)</title><link href="http://localhost:4000/2021/11/21/oracle3.html" rel="alternate" type="text/html" title="Oracle DB &amp;amp; SQL 3(오라클 데이터타입 정리)" /><published>2021-11-21T00:00:00+09:00</published><updated>2021-11-21T00:00:00+09:00</updated><id>http://localhost:4000/2021/11/21/oracle3</id><content type="html" xml:base="http://localhost:4000/2021/11/21/oracle3.html"><![CDATA[<h1 id="들어가기-전에">들어가기 전에</h1>
<p>오라클 데이터 타입은 테이블에서 컬럼이 저장되는 데이터 유형을 말합니다. 오라클의 데이터 타입은 <code class="language-plaintext highlighter-rouge">Oracle Built-in Data Types</code>, <code class="language-plaintext highlighter-rouge">ANSI, DB2 and SQL/DS Data Types</code>, <code class="language-plaintext highlighter-rouge">User-Defined Types</code>, <code class="language-plaintext highlighter-rouge">Oracle-Supplied Types</code>, <code class="language-plaintext highlighter-rouge">Data Type Comparison Rules</code>, <code class="language-plaintext highlighter-rouge">Data Conversion</code>이 있지만, 이번 포스팅에서는 가장 기본적인 <code class="language-plaintext highlighter-rouge">Oracle Built-in Data Types</code>만을 다루도록 하겠습니다.</p>

<h1 id="핵심-개념">핵심 개념</h1>
<ul>
  <li>Oracle Built-in Data Types</li>
  <li>Character Data Type</li>
  <li>Numeric Data Type</li>
  <li>Date Data Type</li>
  <li>LOB Data Type</li>
</ul>

<!--more-->

<h1 id="character-data-type">Character Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CHAR(n)</td>
      <td>고정길이 문자 / n : 크기(단위: byte, default: 1, max: 2000)</td>
    </tr>
    <tr>
      <td>VARCHAR2(n)</td>
      <td>가변길이 문자 / n : 크기(단위: byte, default: 1, max: 4000)</td>
    </tr>
    <tr>
      <td>NCHAR(n)</td>
      <td>고정길이 유니코드 문자(다국어 입력가능) / n : 크기(단위: byte, default: 1, max: 2000)</td>
    </tr>
    <tr>
      <td>NVARCHAR2(n)</td>
      <td>가변길이 유니코드 문자(다국어 입력가능) / n : 크기(단위: byte, default: 1, max: 2000)</td>
    </tr>
    <tr>
      <td>LONG</td>
      <td>가변길이 문자 / 최대: 2GB</td>
    </tr>
    <tr>
      <td>CLOB</td>
      <td>가변길이 대용량 문자 / 크기: 4GB</td>
    </tr>
    <tr>
      <td>NCLOB</td>
      <td>가변길이 대용량 유니코드 문자(다국어 입력가능) / 크기: 4GB</td>
    </tr>
  </tbody>
</table>

<p>많은 프로그래밍 언어에서 가장 기본적인 데이터 타입은 정수형이지만, SQL에서는 문자형입니다. 여기서 <mark>가변길이</mark>는 선언된 크기 n 미만의 데이터를 입력시 입력된 데이터 크기만큼만을 할당하는 것을 의미합니다. ~번외로 CHAR(n CHAR)을 선언하시면, n글자의 문자를 받을 수 있습니다(n개의 음절)~.</p>

<h1 id="numeric-data-type">Numeric Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>NUMBER(P,S)</td>
      <td>가변길이 숫자 / P : 소숫점 포함 전체 자릿수(범위 : 1 ~ 38, default : 38) / S : 소수점 자릿수(범위 : -84 ~ 127, default : 0) /  max : 22byte</td>
    </tr>
    <tr>
      <td>FLOAT(P)</td>
      <td>NUMBER의 하위타입 / P : (범위 : 1~128, default : 128) / max : 22byte</td>
    </tr>
    <tr>
      <td>BINARY_FLOAT</td>
      <td>32bit 부동소수점 수 / max : 4byte</td>
    </tr>
    <tr>
      <td>BINARY_DOUBLE</td>
      <td>64bit 부동소수점 수 / max : 8byte</td>
    </tr>
  </tbody>
</table>

<h1 id="date-data-type">Date Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DATE</td>
      <td>BC 4712년 1월 1일 ~ 9999년 12월 31일, 연, 월, 일, 시, 분, 초 까지 입력 가능</td>
    </tr>
    <tr>
      <td>TIMESTAMP</td>
      <td>DATE에 더해 밀리초 이하까지 입력 가능</td>
    </tr>
  </tbody>
</table>

<h1 id="lob-data-type">LOB Data Type</h1>

<table>
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CLOB</td>
      <td>가변길이 대용량 문자 / 크기: 4GB</td>
    </tr>
    <tr>
      <td>NCLOB</td>
      <td>가변길이 대용량 유니코드 문자(다국어 입력가능) / 크기: 4GB</td>
    </tr>
    <tr>
      <td>BLOB</td>
      <td>이진형 대용량 객체 (주로 그래픽, 이미지, 동영상 등의 데이터에서 사용)</td>
    </tr>
    <tr>
      <td>BFILE</td>
      <td>대용량 이진 파일에 대한 위치, 이름을 저장</td>
    </tr>
  </tbody>
</table>

<p>여기서 LOB란 Large Object의 약자입니다. 이름에서 알 수 있듯 대용량 데이터를 저장할 수 있는 데이터타입인데, 일반적으로 그래픽, 이미지, 사운드등 비정형 데이터를 저장할때 LOB타입을 사용합니다.</p>

<h1 id="reference">Reference</h1>
<ul>
  <li><a href="https://docs.oracle.com/cd/A87860_01/doc/server.817/a76965/c10datyp.htm">oracle docs</a></li>
</ul>]]></content><author><name>Jaewook Lee</name></author><category term="SQL" /><summary type="html"><![CDATA[들어가기 전에 오라클 데이터 타입은 테이블에서 컬럼이 저장되는 데이터 유형을 말합니다. 오라클의 데이터 타입은 Oracle Built-in Data Types, ANSI, DB2 and SQL/DS Data Types, User-Defined Types, Oracle-Supplied Types, Data Type Comparison Rules, Data Conversion이 있지만, 이번 포스팅에서는 가장 기본적인 Oracle Built-in Data Types만을 다루도록 하겠습니다. 핵심 개념 Oracle Built-in Data Types Character Data Type Numeric Data Type Date Data Type LOB Data Type]]></summary></entry><entry><title type="html">Oracle DB &amp;amp; SQL 2(M1 맥북에서 오라클 DB를 사용하는 방법)</title><link href="http://localhost:4000/2021/11/09/oracle2.html" rel="alternate" type="text/html" title="Oracle DB &amp;amp; SQL 2(M1 맥북에서 오라클 DB를 사용하는 방법)" /><published>2021-11-09T00:00:00+09:00</published><updated>2021-11-09T00:00:00+09:00</updated><id>http://localhost:4000/2021/11/09/oracle2</id><content type="html" xml:base="http://localhost:4000/2021/11/09/oracle2.html"><![CDATA[<h1 id="들어가기-전에">들어가기 전에</h1>
<p>오라클 데이터베이스는 맥 OS를 지원하지 않기 때문에 도커를 이용해서 Oracle Database 환경을 설정해야합니다. 하지만 ARM 아키텍쳐 기반의 M1에서는 이마저도 불가능합니다.</p>

<p><img src="/assets/images/posts/oracle/2/3.png" alt="" /></p>

<blockquote>
  <p>위와 같이 오라클에서 제공하는 이미지를 설치하면 오류가 발생하는데, 오류가 발생하는 이유는 오라클에서 제공하는 이미지가 M1을 지원하지 않기 때문입니다.</p>
</blockquote>

<p>이에 대한 해결책으로 이번 포스팅에서는 <code class="language-plaintext highlighter-rouge">Oracle Cloud</code>로 무료 데이터베이스를 생성하고 이를 <code class="language-plaintext highlighter-rouge">SQL Developer</code>에 연결하는 방법을 다뤄보도록 하겠습니다.</p>

<h1 id="핵심-개념">핵심 개념</h1>
<ul>
  <li>SQL Developer</li>
  <li>Oracle Cloud</li>
</ul>

<!--more-->

<h1 id="oracle-clould-free-tier-가입">Oracle Clould Free Tier 가입</h1>
<p>먼저 <a href="https://www.oracle.com/cloud/free/">Oracle Clould Free Tier</a>에 접속하셔서 회원가입을 해야합니다.</p>

<p><img src="/assets/images/posts/oracle/2/1.png" alt="" /></p>

<p><img src="/assets/images/posts/oracle/2/2.png" alt="" /></p>

<p>위와 같이 이동하셔서 내용을 기입하신 후 가입에 완료하시면 400 크레딧을 받을 수 있습니다.👍</p>

<h1 id="autonomous-databaseoracle-19c-생성">Autonomous Database(oracle 19c) 생성</h1>
<p>가입을 무사히 완료하신 뒤 오라클 클라우드에 로그인 하시면 아래와 같은 화면이 나오게 됩니다.</p>

<p><img src="/assets/images/posts/oracle/2/4.png" alt="" /></p>

<p>이 페이지를 내리셔서, <code class="language-plaintext highlighter-rouge">Launch Resources</code>에서 <code class="language-plaintext highlighter-rouge">Create an ADW database</code>를 선택하면 됩니다.</p>

<p><img src="/assets/images/posts/oracle/2/5.png" alt="" /></p>

<p>작성해 주셔야 하는게 두가지가 있습니다. 첫번째는 <code class="language-plaintext highlighter-rouge">Display name</code>을 사용하기 편한 이름으로 변경하시는 것이고</p>

<p><img src="/assets/images/posts/oracle/2/6.png" alt="" /></p>

<p>두번째는 쭉 내리셔서 관리자 비밀번호를 정해주는 것 입니다.</p>

<p><img src="/assets/images/posts/oracle/2/7.png" alt="" /></p>

<p>잠시 기다리시면 DB 생성이 완료됩니다!
<img src="/assets/images/posts/oracle/2/8.png" alt="" />
<img src="/assets/images/posts/oracle/2/9.png" alt="" /></p>

<h1 id="wallet-파일-다운로드">wallet 파일 다운로드</h1>
<p><code class="language-plaintext highlighter-rouge">SQL Developer</code>에 DB를 연결하기 위해 <code class="language-plaintext highlighter-rouge">wallet</code> 파일을 다운받아줘야 합니다. 이를 위해, 메뉴에서 두번째에 있는 <code class="language-plaintext highlighter-rouge">DB Connection</code>을 클릭합니다.
<img src="/assets/images/posts/oracle/2/10.png" alt="" /></p>

<p>그런 다음 <code class="language-plaintext highlighter-rouge">Download wallet</code>을 클릭하셔서 <code class="language-plaintext highlighter-rouge">.zip</code>파일을 다운로드 받으시면 됩니다.</p>

<p><img src="/assets/images/posts/oracle/2/11.png" alt="" /></p>

<h1 id="sql-developer-설치">SQL Developer 설치</h1>
<p><code class="language-plaintext highlighter-rouge">SQL Developer</code>를 설치할 차례입니다. <a href="https://www.oracle.com/tools/downloads/sqldev-downloads.html">다운로드 링크</a>에 접속하셔서 <code class="language-plaintext highlighter-rouge">mac OSX</code>에 해당하는 파일을 다운로드하시면 <code class="language-plaintext highlighter-rouge">.zip</code>파일이 받아지는데 압축을 풀어주시고 설치 파일을 실행하시면 끝입니다.</p>

<h1 id="db-연결">DB 연결</h1>
<p>이제 드디어 DB와 SQL Developer를 연결할 차례입니다. SQL Developer를 실행하셔서 좌측 상단의 <code class="language-plaintext highlighter-rouge">초록색 십자가 버튼</code>을 클릭하신 뒤
<img src="/assets/images/posts/oracle/2/12.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Connection Type</code>을 basic에서 cloud wallet으로 바꾼 뒤</p>

<p><img src="/assets/images/posts/oracle/2/13.png" alt="" /></p>

<p>browse 버튼을 눌러 전에 다운 받았던 wallet 파일을 선택 해 줍니다.</p>

<p><img src="/assets/images/posts/oracle/2/14.png" alt="" /></p>

<p>그런다음,<code class="language-plaintext highlighter-rouge">connection name</code>을 적어주시고, <code class="language-plaintext highlighter-rouge">username</code>은 admin으로 <code class="language-plaintext highlighter-rouge">password</code>는 데이터베이스를 만들때 설정하신 비밀번호를 적어 주시면 끝입니다.</p>

<p><img src="/assets/images/posts/oracle/2/15.png" alt="" /></p>

<p>잘 동작하는지 확인하기 위해 하단의 <code class="language-plaintext highlighter-rouge">Test</code>버튼을 클릭하시고, 잠시 기다리시면 좌측 하단에 <code class="language-plaintext highlighter-rouge">Status: Success</code>라고 출력되어 잘 연결이 됐음을 알수 있습니다.</p>

<p><img src="/assets/images/posts/oracle/2/16.png" alt="" /></p>

<p>다시 작성하지 않아도 되게 <code class="language-plaintext highlighter-rouge">save</code>를 눌러 주시고 <code class="language-plaintext highlighter-rouge">connect</code> 버튼을 누르시면 끝입니다. 👏👏👏</p>

<p><img src="/assets/images/posts/oracle/2/17.png" alt="" /></p>]]></content><author><name>Jaewook Lee</name></author><category term="SQL" /><summary type="html"><![CDATA[들어가기 전에 오라클 데이터베이스는 맥 OS를 지원하지 않기 때문에 도커를 이용해서 Oracle Database 환경을 설정해야합니다. 하지만 ARM 아키텍쳐 기반의 M1에서는 이마저도 불가능합니다. 위와 같이 오라클에서 제공하는 이미지를 설치하면 오류가 발생하는데, 오류가 발생하는 이유는 오라클에서 제공하는 이미지가 M1을 지원하지 않기 때문입니다. 이에 대한 해결책으로 이번 포스팅에서는 Oracle Cloud로 무료 데이터베이스를 생성하고 이를 SQL Developer에 연결하는 방법을 다뤄보도록 하겠습니다. 핵심 개념 SQL Developer Oracle Cloud]]></summary></entry><entry><title type="html">Oracle DB &amp;amp; SQL 1(SQL, DB, DBMS의 개념)</title><link href="http://localhost:4000/2021/11/07/oracle1.html" rel="alternate" type="text/html" title="Oracle DB &amp;amp; SQL 1(SQL, DB, DBMS의 개념)" /><published>2021-11-07T00:00:00+09:00</published><updated>2021-11-07T00:00:00+09:00</updated><id>http://localhost:4000/2021/11/07/oracle1</id><content type="html" xml:base="http://localhost:4000/2021/11/07/oracle1.html"><![CDATA[<h1 id="들어가기-전에">들어가기 전에</h1>
<p>프로그램에서 다루는 데이터와 이 데이터를 동시에 사용하는 사람이 많아질 수록 데이터의 관리는 어려워지고 이는 결함을 불러일으킬 수 있습니다. 이러한 동시성, 성능, 보안 등을 충족해 데이터를 관리하기 위해 사용하는 것이 데이터베이스 관리 시스템입니다. 이번 포스팅에서는 이 SQL, 데이터베이스, 데이터베이스 관리 시스템에 대해 알아보도록 하겠습니다.</p>

<h1 id="핵심-개념">핵심 개념</h1>
<ul>
  <li>데이터베이스(database)</li>
  <li>데이터베이스 관리 시스템(DBMS)</li>
  <li>SQL</li>
</ul>

<!--more-->

<h1 id="database와-dbms">Database와 DBMS</h1>
<ul>
  <li>데이터베이스의 정의
    <ul>
      <li>컴퓨터 시스템에 전자적으로 저장되는 구조화된 정보 또는 데이터의 조직화된 모음</li>
      <li>여러 응용 프로그램들의 동합된 정보들을 저장하여 운영할 수 있는 공용 데이터의 집합</li>
    </ul>
  </li>
  <li>데이터베이스의 유형
    <ul>
      <li>관계형 데이터베이스 : 각 항목이 열과 행이 있는 테이블 집합으로 구성되는 유형</li>
      <li>NoSQL 데이터베이스 : 관계형 데이터베이스는 데이터베이스에 삽입되는 모든 데이터의 구성방식을 정의해야한다는 문제점이 있다. 이를 해결하기 위한 데이터베이스의 유형이 NoSQL 또는 비관계형 데이터베이스이다. 이를 사용해 비정형, 반정형 데이터를 저장하고 조직할 수 있다.</li>
    </ul>
  </li>
  <li>데이터베이스 관리 시스템의 정의
    <ul>
      <li>데이터베이스와 사용자 또는 프로그램 간의 인터페이스 역활을 하여 사용자 정부의 구성 및 최적화 방법을 검색, 업데이트 및 관리할 수 있게 해주는 시스템</li>
    </ul>
  </li>
  <li>데이터베이스 관리 시스템의 장점
    <ul>
      <li>데이터 중복 최소화</li>
      <li>데이터의 일관성 및 무결성 유지</li>
      <li>데이터 보안 보장</li>
    </ul>
  </li>
</ul>

<h1 id="sqlstructured-query-language">SQL(Structured Query Language)</h1>
<ul>
  <li>SQL의 정의
    <ul>
      <li>SQL은 데이터를 쿼리, 조작 및 정의하고 엑세스 제어를 제공하기 위해 거의 모든 관계형 데이터베이스에서 사용되는 프로그래밍 언어이다.</li>
    </ul>
  </li>
  <li>SQL 문법의 종류
    <ul>
      <li>DDL(Data Definition Language) : 각 릴레이션을 정의하기 위해 사용하는 언어(e.g., CREATE, ALTER, DROP)</li>
      <li>DML(Data Manipualation Language) : 데이터를 추가, 수정, 삭제하기 위한, 즉 데이터 관리를 위한 언어(e.g., SELECT, INSERT, UPDATE, …)</li>
      <li>DCL(Data Control Language) : 사용자 관리 및 사용자별로 릴레이션 또는 데이터를 관리하고 접근하는 권한을 다루기 위한 언어(e.g., GRANT, REVOKE, …)</li>
    </ul>
  </li>
  <li>SQL의 언어적 특성
    <ul>
      <li>대소문자를 구분하지 않는다.</li>
      <li>명령어는 세미콜론(;)으로 끝나야한다.</li>
      <li>고유값은 따옴표(‘)로 감싸줘야한다.</li>
      <li>객체를 나타낼 때는 백틱(`)으로 감싸줘야한다.</li>
      <li>주석은 문장 앞에 <code class="language-plaintext highlighter-rouge">--</code>을 붙여 사용한다.</li>
      <li>여러 줄 주석은 <code class="language-plaintext highlighter-rouge">/* */</code>로 감싸 사용한다.
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
SELECT * FROM EMP WHERE EMPID=(SELECT * FROM WHERE NAME='홍길동')
*/</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Jaewook Lee</name></author><category term="SQL" /><summary type="html"><![CDATA[들어가기 전에 프로그램에서 다루는 데이터와 이 데이터를 동시에 사용하는 사람이 많아질 수록 데이터의 관리는 어려워지고 이는 결함을 불러일으킬 수 있습니다. 이러한 동시성, 성능, 보안 등을 충족해 데이터를 관리하기 위해 사용하는 것이 데이터베이스 관리 시스템입니다. 이번 포스팅에서는 이 SQL, 데이터베이스, 데이터베이스 관리 시스템에 대해 알아보도록 하겠습니다. 핵심 개념 데이터베이스(database) 데이터베이스 관리 시스템(DBMS) SQL]]></summary></entry><entry><title type="html">이진 탐색(Binary Search) by 파이썬</title><link href="http://localhost:4000/2021/10/24/binary-search.html" rel="alternate" type="text/html" title="이진 탐색(Binary Search) by 파이썬" /><published>2021-10-24T00:00:00+09:00</published><updated>2021-10-24T00:00:00+09:00</updated><id>http://localhost:4000/2021/10/24/binary-search</id><content type="html" xml:base="http://localhost:4000/2021/10/24/binary-search.html"><![CDATA[<h1 id="알고리즘-설명">알고리즘 설명</h1>
<p>이진 탐색은 가장 보편적으로 사용되는 탐색 알고리즘 중 하나입니다. 이진 탐색은 정렬된 배열에 적용될 수 있으며 빠른 탐색 알고리즘 중 하나입니다. 이진 탐색은 매 iteration 마다 탐색 공간을 반으로 나눠가는 알고리즘 입니다(자세한 설명은 <a href="https://www.code-recipe.com/post/binary-search">이 글</a>을 참고하세요).
<!--more--></p>

<h1 id="구현">구현</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">right</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">right</span> <span class="o">&gt;=</span> <span class="n">left</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">mid</span>
        <span class="k">elif</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>]]></content><author><name>Jaewook Lee</name></author><category term="algorithm" /><summary type="html"><![CDATA[알고리즘 설명 이진 탐색은 가장 보편적으로 사용되는 탐색 알고리즘 중 하나입니다. 이진 탐색은 정렬된 배열에 적용될 수 있으며 빠른 탐색 알고리즘 중 하나입니다. 이진 탐색은 매 iteration 마다 탐색 공간을 반으로 나눠가는 알고리즘 입니다(자세한 설명은 이 글을 참고하세요).]]></summary></entry><entry><title type="html">코딩 테스트, 파이썬 문법 정리</title><link href="http://localhost:4000/2021/09/13/python_coding_test_tip.html" rel="alternate" type="text/html" title="코딩 테스트, 파이썬 문법 정리" /><published>2021-09-13T00:00:00+09:00</published><updated>2021-09-13T00:00:00+09:00</updated><id>http://localhost:4000/2021/09/13/python_coding_test_tip</id><content type="html" xml:base="http://localhost:4000/2021/09/13/python_coding_test_tip.html"><![CDATA[<p>파이썬의 많은 문법 중 코딩 테스트에서 생산성을 높이기 위한 고급(?) 문법을 정리해 보도록 하겠습니다.<br />
(출처 : <a href="https://github.com/onlybooks/algorithm-interview#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0">파이썬 알고리즘 인터뷰</a>)
<!--more--></p>
<h1 id="네이밍-컨벤션">네이밍 컨벤션</h1>
<ul>
  <li>자바와 달리 파이썬에서의 네이밍 컨벤션은 스네이크 케이스를 따릅니다.</li>
  <li>스네이크 케이스란, 각 단어를 밑줄(_)로 구분하여 표기하는 스네이크 케이스(Snake Case)를 따른다.
    <blockquote>
      <p>카멜 케이스, 스네이크 케이스</p>
      <ul>
        <li>카멜 케이스<br />
camelCase: int = 1</li>
        <li>스네이크 케이스<br />
snake_case: int = 1</li>
      </ul>
    </blockquote>
  </li>
</ul>

<h1 id="타입-힌트">타입 힌트</h1>
<ul>
  <li>파이썬은 동적 타이핑 언어임에도, 타입을 지정할 수 있는 타입 힌트가 추가됨</li>
  <li>타입 힌트를 사용하면 가독성이 좋아지며 버그 발생 확률을 줄일 수 있음</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</code></pre></div></div>
<ul>
  <li>강제 규약이 아니기 때문에, 여전히 동적으로 할당될 수 있음
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">mypy</code> 타입 힌트에 오류를 확일할 수 있는 라이브러리<br />
<code class="language-plaintext highlighter-rouge">$ pip install mypy</code></p>
    </blockquote>
  </li>
</ul>

<h1 id="리스트-컴프리헨션">리스트 컴프리헨션</h1>
<ul>
  <li>리스트 컴프리헨션 : 기존 리스트를 기반으로 새로운 리스트를 만들어내는 구문</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</code></pre></div></div>
<ul>
  <li>리스트 컴프리헨션을 사용하지 않는 경우</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</code></pre></div></div>
<ul>
  <li>번외로 딕셔너리도 가능하다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">value</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">original</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>
</code></pre></div></div>
<ul>
  <li>딕셔너리 컴프리헨션을 사용하지 않는 경우</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">original</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
  <span class="n">a</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div></div>

<h1 id="제너레이터">제너레이터</h1>
<ul>
  <li>제너레이터 : 루프의 반복 동작을 제어할 수 있는 루틴 형태</li>
  <li><code class="language-plaintext highlighter-rouge">yield</code> 구문을 사용해 제너레이터를 리턴할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_natural_number</span><span class="p">():</span>
  <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">yield</span> <span class="n">n</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_natural_number</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">get_natural_number</span> <span class="n">at</span> <span class="p">...</span><span class="o">&gt;</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">g</span><span class="o">=</span><span class="n">get_natural_number</span><span class="p">()</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
  <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
<span class="p">...</span>
</code></pre></div></div>

<h1 id="range">range()</h1>
<ul>
  <li>제너레이터의 방식을 활용하는 대표적인 함수가 range이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<ul>
  <li>
    <p>for 문에서 사용할 경우 내부적으로 제너레이터의 next()를 호출하듯 매번 다음 숫자를 생성</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span>
</code></pre></div>    </div>
  </li>
  <li>값을 생성하는 것이 아리나, 생성해야 한다는 조건만 존재</li>
  <li>
    <p><mark>range가 실제 선언보다 메모리 점유율이 낮음</mark></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)]</span> <span class="c1"># 메모리 8697464
</span><span class="n">b</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span> <span class="c1"># 메모리 48
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="enumerate">enumerate</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">인덱스</code>를 포함한 객체를 리턴한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)]</span>
</code></pre></div></div>

<h1 id="-나눗셈-연산자">// 나눗셈 연산자</h1>
<ul>
  <li>파이썬 3 이상에서 <code class="language-plaintext highlighter-rouge">/ 연산자</code>는 소수점 까지 리턴함</li>
  <li><code class="language-plaintext highlighter-rouge">// 연산자</code>는 몫을 구하는 연산자이다.</li>
  <li><code class="language-plaintext highlighter-rouge">% 연산자</code> : 나머지를 구하는 연산자</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">divmod()</code> : 몫과 나머지를 동시에 구하는 함수</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">divmod</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="print">print</h1>
<ul>
  <li>여러 값을 출력하는 법</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'A1'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">A1</span> <span class="n">B2</span>
</code></pre></div></div>

<ul>
  <li>sep 파라미터로 구분자를 지정</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'A1'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">','</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">A1</span><span class="p">,</span><span class="n">B1</span>
</code></pre></div></div>

<ul>
  <li>end 파라미터로 줄바꿈을 제어할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'A1'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'B1'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">A1</span> <span class="n">B1</span>
</code></pre></div></div>

<ul>
  <li>리스트를 출력할 때는 join()으로 묶어서 처리한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="n">B</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">{}</code>을 활용하는 방법</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idx</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">fruit</span> <span class="o">=</span> <span class="s">"Apple"</span>
<span class="k">print</span><span class="p">(</span><span class="s">'{0}: {1}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fruit</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span><span class="p">:</span> <span class="n">fruit</span>
<span class="k">print</span><span class="p">(</span><span class="s">'{}: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fruit</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span><span class="p">:</span> <span class="n">fruit</span>
</code></pre></div></div>

<ul>
  <li><mark>f-string</mark>
    <ul>
      <li>변수 뒤에 별도로 부여할 필요가 없어 간편함</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">fruit</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span><span class="p">:</span> <span class="n">Apple</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="pass">pass</h1>
<ul>
  <li>전체 골격을 잡아 놓고 내부를 차후에 구현하려는 경우, 메소드가 아무런 처리를 하지 않는 경우 오류가 발생</li>
  <li>이를 해결하기 위해 pass를 삽입해 간단하게 <code class="language-plaintext highlighter-rouge">널 연산</code>을 삽입할 수 있다.</li>
  <li>즉, 목업 인터페이스부터 구현해 추후 구현을 진행할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">method_a</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">pass</span>
      
  <span class="k">def</span> <span class="nf">method_b</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Method B"</span><span class="p">)</span>  
      
<span class="n">c</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="local">local</h1>
<ul>
  <li>로컬 심볼 테이블 딕셔너리를 가져오는 메소드(로컬에 선언된 모든 변수를 조회)</li>
  <li>클래스의 특정 메소드 내부에서나 함수 내부의 로컬 정보를 조회해 잘못 선언한 부분이 없는지 확인하는 용도로 활용 가능하다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pprint</span>
<span class="n">pprint</span><span class="p">.</span><span class="n">pprint</span><span class="p">(</span><span class="nb">locals</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">{</span><span class="s">'nums'</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s">'pprint'</span><span class="p">:</span> <span class="p">...,</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s">'self'</span><span class="p">:</span> <span class="p">...,</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s">'target'</span><span class="p">:</span> <span class="mi">9</span><span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Jaewook Lee</name></author><category term="coding-test" /><summary type="html"><![CDATA[파이썬의 많은 문법 중 코딩 테스트에서 생산성을 높이기 위한 고급(?) 문법을 정리해 보도록 하겠습니다. (출처 : 파이썬 알고리즘 인터뷰)]]></summary></entry><entry><title type="html">Github(깃허브) 프로필 꾸미기(4) - Contribution Chart</title><link href="http://localhost:4000/2021/08/09/git_profile_4.html" rel="alternate" type="text/html" title="Github(깃허브) 프로필 꾸미기(4) - Contribution Chart" /><published>2021-08-09T00:00:00+09:00</published><updated>2021-08-09T00:00:00+09:00</updated><id>http://localhost:4000/2021/08/09/git_profile_4</id><content type="html" xml:base="http://localhost:4000/2021/08/09/git_profile_4.html"><![CDATA[<p>깃허브 프로필에 컨트리뷰션 차트 추가하는 법</p>

<!--more-->
<h1 id="컨트리뷰션-차트contribution-chart-추가">컨트리뷰션 차트(Contribution chart) 추가</h1>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &lt;github user name&gt;/.github/workflows/cobrinha.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">Generate Datas</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span> <span class="c1"># execute every 12 hours</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*</span><span class="nv"> </span><span class="s">*/12</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Jobs to update datas</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># Snake Animation</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">Platane/snk@master</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">snake-gif</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github_user_name</span><span class="pi">:</span> <span class="s">your_git_username</span>
          <span class="na">svg_out_path</span><span class="pi">:</span> <span class="s">dist/github-contribution-grid-snake.svg</span>

      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">crazy-max/ghaction-github-pages@v2.1.3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">target_branch</span><span class="pi">:</span> <span class="s">output</span>
          <span class="na">build_dir</span><span class="pi">:</span> <span class="s">dist</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">$</span>
</code></pre></div></div>

<p>우선 <code class="language-plaintext highlighter-rouge">/.github/workflows</code> 폴더를 생성하시고, 폴더 안에 <code class="language-plaintext highlighter-rouge">cobrinha.yml</code>파일을 생성하셔서 위와 같이 코드를 작성해주시면 됩니다. 다른건 수정할게 없고, <code class="language-plaintext highlighter-rouge">github_user_name</code>에 자신의 사용자명을 기입하시면 됩니다.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- github_user_name/README.md --&gt;</span>
<span class="gu">## 🌱 Git Contribution Chart</span>
 !<span class="p">[</span><span class="nv">Snake animation</span><span class="p">](</span><span class="sx">https://github.com/github_user_name/github_user_name/blob/output/github-contribution-grid-snake.svg</span><span class="p">)</span><span class="nt">&lt;br&gt;</span>
</code></pre></div></div>

<p>위의 코드에서 <code class="language-plaintext highlighter-rouge">github_user_name</code>을 자신의 깃허브 사용자명으로 바꾸시고 <code class="language-plaintext highlighter-rouge">README.md</code>파일에 추가해주시면 됩니다.</p>

<p>그 다음은 <a href="https://lee-jaewook.github.io/2021/07/10/git_profile_1.html">Github(깃허브) 프로필 꾸미기(1)</a>에서 설명드렸던 것처럼 깃허브 레파지토리에서 <code class="language-plaintext highlighter-rouge">Action</code>을 실행해 주시면 됩니다.</p>

<p><img src="/assets/images/posts/github/4/2.png" alt="" /></p>

<p><img src="/assets/images/posts/github/4/3.png" alt="" /></p>]]></content><author><name>Jaewook Lee</name></author><category term="github" /><summary type="html"><![CDATA[깃허브 프로필에 컨트리뷰션 차트 추가하는 법]]></summary></entry><entry><title type="html">Github(깃허브) 프로필 꾸미기(3) - Technique Icons &amp;amp; Badge</title><link href="http://localhost:4000/2021/08/02/git_profile_3.html" rel="alternate" type="text/html" title="Github(깃허브) 프로필 꾸미기(3) - Technique Icons &amp;amp; Badge" /><published>2021-08-02T00:00:00+09:00</published><updated>2021-08-02T00:00:00+09:00</updated><id>http://localhost:4000/2021/08/02/git_profile_3</id><content type="html" xml:base="http://localhost:4000/2021/08/02/git_profile_3.html"><![CDATA[<h1 id="들어가기-전에">들어가기 전에</h1>
<p>깃허브 프로필 꾸미기를 진행하면서, 이번에는 깃허브 프로필에 <code class="language-plaintext highlighter-rouge">기술 아이콘</code> 및 <code class="language-plaintext highlighter-rouge">소셜 뱃지</code>를 생성하는 법에 대해서 포스팅해보겠습니다.</p>

<!--more-->
<h1 id="1-기술-아이콘technique-icons-생성">1. 기술 아이콘(Technique Icons) 생성</h1>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- github_user_name/README.md --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"display: inline_block"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">align=</span><span class="s">"center"</span> <span class="na">alt=</span><span class="s">"Python"</span> <span class="na">height=</span><span class="s">"40"</span> <span class="na">width=</span><span class="s">"50"</span> <span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/gh/devicons/devicon/icons/python/python-original.svg"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>기술 아이콘을 추가하는 방법은 README.md 파일에 위의 코드를 추가하시면 됩니다. 예시 코드에는 파이썬만 추가하였지만 <a href="https://devicon.dev/">devicon.dev</a>에 접속하셔서 원하는 기술 아이콘의 <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> 요소를 얻을 수 있습니다.</p>

<p><img src="/assets/images/posts/github/3/2.png" alt="" /></p>

<p><img src="/assets/images/posts/github/3/1.png" alt="" /></p>

<h1 id="2-소셜-뱃지social-badge-생성">2. 소셜 뱃지(Social Badge) 생성</h1>
<p><a href="https://devicon.dev/">150-badges-for-github</a>에 들어가셔서 원하는 뱃지의 url을 복사해 <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>태그로 추가하시면 됩니다. 예시 코드는 아래와 같습니다.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- github_user_name/README.md --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"display: inline_block"</span><span class="nt">&gt;&lt;br&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://github.com/lee-jaewook"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"https://img.shields.io/badge/GitHub-100000?style=for-the-badge&amp;logo=github&amp;logoColor=white"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.linkedin.com/in/lee-jaewook/"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&amp;logo=linkedin&amp;logoColor=white"</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p><img src="/assets/images/posts/github/3/3.png" alt="" /></p>]]></content><author><name>Jaewook Lee</name></author><category term="github" /><summary type="html"><![CDATA[들어가기 전에 깃허브 프로필 꾸미기를 진행하면서, 이번에는 깃허브 프로필에 기술 아이콘 및 소셜 뱃지를 생성하는 법에 대해서 포스팅해보겠습니다.]]></summary></entry><entry><title type="html">Github(깃허브) 프로필 꾸미기(2) - Stats</title><link href="http://localhost:4000/2021/07/21/git_profile_2.html" rel="alternate" type="text/html" title="Github(깃허브) 프로필 꾸미기(2) - Stats" /><published>2021-07-21T00:00:00+09:00</published><updated>2021-07-21T00:00:00+09:00</updated><id>http://localhost:4000/2021/07/21/git_profile_2</id><content type="html" xml:base="http://localhost:4000/2021/07/21/git_profile_2.html"><![CDATA[<p>깃허브 프로필에 Github Stats 생성하는 법</p>

<!--more-->
<h1 id="github-stats-생성">Github Stats 생성</h1>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- github_user_name/README.md --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">align=</span><span class="s">"center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://github.com/your_git_username"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">height=</span><span class="s">"180em"</span> <span class="na">src=</span><span class="s">"https://github-readme-stats.vercel.app/api?username=your_git_username&amp;show_icons=true&amp;theme=dracula&amp;include_all_commits=true&amp;count_private=true"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">height=</span><span class="s">"180em"</span> <span class="na">src=</span><span class="s">"https://github-readme-stats.vercel.app/api/top-langs/?username=your_git_username&amp;layout=compact&amp;langs_count=7&amp;theme=dracula"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Github Stats을 추가하는 방법은 간단합니다. README.md 파일에 위의 코드를 추가하고, <code class="language-plaintext highlighter-rouge">your_git_username</code>을 자신의 깃허브 사용자명으로 수정해주시면 됩니다.</p>

<p><img src="/assets/images/posts/github/2/1.png" alt="" /></p>

<p>(번외로 스타일을 바꾸고 싶으신 분은 <a href="https://github.com/anuraghazra/github-readme-stats">github-readme-stats</a>를 참고하시면 됩니다.)</p>]]></content><author><name>Jaewook Lee</name></author><category term="github" /><summary type="html"><![CDATA[깃허브 프로필에 Github Stats 생성하는 법]]></summary></entry></feed>