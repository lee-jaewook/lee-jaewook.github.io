I"<)<p>파이썬의 많은 문법 중 코딩 테스트에서 생산성을 높이기 위한 고급(?) 문법을 정리해 보도록 하겠습니다.<br />
(출처 : <a href="https://github.com/onlybooks/algorithm-interview#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0">파이썬 알고리즘 인터뷰</a>)
<!--more--></p>
<h1 id="네이밍-컨벤션">네이밍 컨벤션</h1>
<ul>
  <li>자바와 달리 파이썬에서의 네이밍 컨벤션은 스네이크 케이스를 따릅니다.</li>
  <li>스네이크 케이스란, 각 단어를 밑줄(_)로 구분하여 표기하는 스네이크 케이스(Snake Case)를 따른다.
    <blockquote>
      <p>카멜 케이스, 스네이크 케이스</p>
      <ul>
        <li>카멜 케이스<br />
camelCase: int = 1</li>
        <li>스네이크 케이스<br />
snake_case: int = 1</li>
      </ul>
    </blockquote>
  </li>
</ul>

<h1 id="타입-힌트">타입 힌트</h1>
<ul>
  <li>파이썬은 동적 타이핑 언어임에도, 타입을 지정할 수 있는 타입 힌트가 추가됨</li>
  <li>타입 힌트를 사용하면 가독성이 좋아지며 버그 발생 확률을 줄일 수 있음</li>
  <li>사용 예시
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</code></pre></div>    </div>
  </li>
  <li>강제 규약이 아니기 때문에, 여전히 동적으로 할당될 수 있음
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">mypy</code> 타입 힌트에 오류를 확일할 수 있는 라이브러리<br />
<code class="language-plaintext highlighter-rouge">$ pip install mypy</code></p>
    </blockquote>
  </li>
</ul>

<h1 id="리스트-컴프리헨션">리스트 컴프리헨션</h1>
<ul>
  <li>리스트 컴프리헨션 : 기존 리스트를 기반으로 새로운 리스트를 만들어내는 구문</li>
  <li>예시
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>리스트 컴프리헨션을 사용하지 않는 경우
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
<span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
  <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>번외로 딕셔너리도 가능하다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">value</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">original</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>
</code></pre></div>    </div>
  </li>
  <li>딕셔너리 컴프리헨션을 사용하지 않는 경우
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">original</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
<span class="n">a</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="제너레이터">제너레이터</h1>
<ul>
  <li>제너레이터 : 루프의 반복 동작을 제어할 수 있는 루틴 형태</li>
  <li><code class="language-plaintext highlighter-rouge">yield</code> 구문을 사용해 제너레이터를 리턴할 수 있다.</li>
  <li>예시
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_natural_number</span><span class="p">():</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">yield</span> <span class="n">n</span>
</code></pre></div>    </div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_natural_number</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">get_natural_number</span> <span class="n">at</span> <span class="p">...</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">g</span><span class="o">=</span><span class="n">get_natural_number</span><span class="p">()</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
<span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span><span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span><span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span><span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span><span class="mi">4</span>
<span class="p">...</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="range">range()</h1>
<ul>
  <li>제너레이터의 방식을 활용하는 대표적인 함수가 range이다.</li>
  <li>예시
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>for 문에서 사용할 경우 내부적으로 제너레이터의 next()를 호출하듯 매번 다음 숫자를 생성
    <ul>
      <li>예시
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
<span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>값을 생성하는 것이 아리나, 생성해야 한다는 조건만 존재</li>
  <li><mark>range가 실제 선언보다 메모리 점유율이 낮음</mark>
    <ul>
      <li>예시
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)]</span> <span class="c1"># 메모리 8697464
</span><span class="n">b</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span> <span class="c1"># 메모리 48
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h1 id="enumerate">enumerate</h1>
:ET